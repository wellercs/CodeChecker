[
    {
        "pattern": "<cfquery\\s+",
        "message": "Remove inline query. Queries should be encapsulated in the model/service layer.",
        "componentname": "CodeChecker",
        "category": "Standards",
        "name": "Don't use cfquery in a cfm page",
        "passonmatch": false,
        "extensions": "cfm",
        "severity": "5",
        "customcode": "",
        "bulkcheck": false,
        "tagname": "",
        "functionname": "checkCode"
    },
    {
        "pattern": "\\b(form|application|url|session|cgi|client|request|cookie)(?=(\\[|\\.\\w))",
        "message": "Avoid using shared scope variables from within a CFC as it breaks encapsulation.",
        "componentname": "CodeChecker",
        "category": "Standards",
        "name": "Don't use shared scope variables in a CFC",
        "passonmatch": false,
        "extensions": "cfc",
        "severity": "4",
        "customcode": "",
        "bulkcheck": false,
        "tagname": "",
        "functionname": "checkCode"
    },
    {
        "pattern": "is\\s+true|is\\s+not\\s+true|is\\s+false|is\\s+not\\s+false",
        "message": "Avoid using IS for boolean tests.",
        "componentname": "CodeChecker",
        "category": "Standards",
        "name": "Don't use IS or GT for boolean tests",
        "passonmatch": false,
        "extensions": "cfm,cfc",
        "severity": "3",
        "customcode": "",
        "bulkcheck": false,
        "tagname": "",
        "functionname": "checkCode"
    },
    {
        "pattern": "is\\s+[0-9]+|is\\s+not\\s+[0-9]+|eq\\s+\\042[A-Za-z]+\\042|eq\\s+\\042[0-9]+\\042|neq\\s+\\042[A-Z][a-z]+\\042|neq\\s+\\042[0-9]+\\042",
        "message": "Use IS/IS NOT for string comparisons and EQ/NEQ for numeric comparisons.",
        "componentname": "CodeChecker",
        "category": "Standards",
        "name": "Illogical comparison operator",
        "passonmatch": false,
        "extensions": "cfm,cfc",
        "severity": "3",
        "customcode": "",
        "bulkcheck": false,
        "tagname": "",
        "functionname": "checkCode"
    },
    {
        "pattern": "\\+\\s+\\042[0-9]\\042|\\-\\s+\\042[0-9]\\042|\\*\\s+\\042[0-9]\\042|\\/\\s+\\042[0-9]\\042|\\%\\s+\\042[0-9]\\042",
        "message": "Mathematical operators should be used with numbers instead of strings.",
        "componentname": "CodeChecker",
        "category": "Standards",
        "name": "Illogical mathematical operator",
        "passonmatch": false,
        "extensions": "cfm,cfc",
        "severity": "3",
        "customcode": "",
        "bulkcheck": false,
        "tagname": "",
        "functionname": "checkCode"
    },
    {
        "pattern": "\\&\\s+[0-9]",
        "message": "The ampersand contcatenator should be used with strings instead of numbers.",
        "componentname": "CodeChecker",
        "category": "Standards",
        "name": "Illogical concatenation",
        "passonmatch": false,
        "extensions": "cfm,cfc",
        "severity": "3",
        "customcode": "",
        "bulkcheck": false,
        "tagname": "",
        "functionname": "checkCode"
    },
    {
        "pattern": "<cfcatch[\\W]+[^\\<cf][\\W]+</cfcatch|<cfcatch></cfcatch>|<cfcatch>\\W+</cfcatch>",
        "message": "Catch blocks should not be empty.",
        "componentname": "CodeChecker",
        "category": "Standards",
        "name": "Empty catch block",
        "passonmatch": false,
        "extensions": "cfm,cfc",
        "severity": "3",
        "customcode": "",
        "bulkcheck": true,
        "tagname": "",
        "functionname": "checkCode"
    },
    {
        "pattern": ".*output=\\042\\s*true\\s*\\042|.*output=\\s*true\\s*",
        "message": "Output attribute of components and functions should be set to false.",
        "componentname": "CodeChecker",
        "category": "Standards",
        "name": "Avoid using output=true in cfcomponent and cffunction",
        "passonmatch": false,
        "extensions": "cfm,cfc",
        "severity": "3",
        "customcode": "",
        "bulkcheck": false,
        "tagname": "cfcomponent|cffunction",
        "functionname": "checkCode"
    },
    {
        "pattern": "function init\\(|<cffunction.*name=\\042init\\042",
        "message": "Every CFC should have an init method.",
        "componentname": "CodeChecker",
        "category": "Standards",
        "name": "Use init method in CFC",
        "passonmatch": true,
        "extensions": "cfc",
        "severity": "3",
        "customcode": "",
        "bulkcheck": true,
        "tagname": "",
        "functionname": "checkCode"
    },
    {
        "pattern": "function onMissingMethod\\(|<cffunction.*name=\\042onMissingMethod\\042",
        "message": "Every CFC should have an onMissingMethod method.",
        "componentname": "CodeChecker",
        "category": "Standards",
        "name": "Use onMissingMethod method in CFC",
        "passonmatch": true,
        "extensions": "cfc",
        "severity": "3",
        "customcode": "",
        "bulkcheck": true,
        "tagname": "",
        "functionname": "checkCode"
    },
    {
        "pattern": ".*hint=\\042\\w+.*\\042",
        "message": "Hints appear in the auto-generated CFC documentation and aid in documenting your code.",
        "componentname": "CodeChecker",
        "category": "Standards",
        "name": "Use hint attribute of cfcomponent, cffunction, cfargument",
        "passonmatch": true,
        "extensions": "cfm,cfc",
        "severity": "1",
        "customcode": "",
        "bulkcheck": false,
        "tagname": "cfcomponent|cffunction|cfargument",
        "functionname": "checkCode"
    },
    {
        "pattern": "ArrayNew\\(1\\)",
        "message": "Avoid ArrayNew(1). Simply use [].",
        "componentname": "CodeChecker",
        "category": "Standards",
        "name": "Don't use ArrayNew(1) function",
        "passonmatch": false,
        "extensions": "cfm,cfc",
        "severity": "1",
        "customcode": "",
        "bulkcheck": false,
        "tagname": "",
        "functionname": "checkCode"
    },
    {
        "pattern": "datasource=.*arguments",
        "message": "Use variables-scoped datasource since the datasource should be set on object instantiation.",
        "componentname": "CodeChecker",
        "category": "Standards",
        "name": "Don't use arguments-scoped datasource",
        "passonmatch": false,
        "extensions": "cfc",
        "severity": "1",
        "customcode": "",
        "bulkcheck": false,
        "tagname": "",
        "functionname": "checkCode"
    }
]