<cfscript>
	/* STANDARDS RULES */
	
	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = false;
	variables.temprulestruct["category"] = "Standards";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfm";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Remove inline query. Queries should be encapsulated in the model/service layer.";
	variables.temprulestruct["name"] = "Don't use cfquery in a cfm page";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = "<cfquery\s+";
	variables.temprulestruct["severity"] = 5;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);

	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = false;
	variables.temprulestruct["category"] = "Standards";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Avoid using shared scope variables from within a CFC as it breaks encapsulation.";
	variables.temprulestruct["name"] = "Don't use shared scope variables in a CFC";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = "\b(form|application|url|session|cgi|client|request|cookie)(?=(\[|\.\w))";
	variables.temprulestruct["severity"] = 4;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);
	
	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = false;
	variables.temprulestruct["category"] = "Standards";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfm,cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Avoid using IS for boolean tests.";
	variables.temprulestruct["name"] = "Don't use IS or GT for boolean tests";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = "is\s+true|is\s+not\s+true|is\s+false|is\s+not\s+false";
	variables.temprulestruct["severity"] = 3;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);

	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = false;
	variables.temprulestruct["category"] = "Standards";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfm,cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Use IS/IS NOT for string comparisons and EQ/NEQ for numeric comparisons.";
	variables.temprulestruct["name"] = "Illogical comparison operator";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = "is\s+[0-9]+|is\s+not\s+[0-9]+|eq\s+\042[A-Za-z]+\042|eq\s+\042[0-9]+\042|neq\s+\042[A-Z][a-z]+\042|neq\s+\042[0-9]+\042";
	variables.temprulestruct["severity"] = 3;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);
	
	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = false;
	variables.temprulestruct["category"] = "Standards";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfm,cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Mathematical operators should be used with numbers instead of strings.";
	variables.temprulestruct["name"] = "Illogical mathematical operator";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = "\+\s+\042[0-9]\042|\-\s+\042[0-9]\042|\*\s+\042[0-9]\042|\/\s+\042[0-9]\042|\%\s+\042[0-9]\042";
	variables.temprulestruct["severity"] = 3;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);
	
	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = false;
	variables.temprulestruct["category"] = "Standards";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfm,cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "The ampersand contcatenator should be used with strings instead of numbers.";
	variables.temprulestruct["name"] = "Illogical concatenation";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = "\&\s+[0-9]";
	variables.temprulestruct["severity"] = 3;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);
	
	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = true;
	variables.temprulestruct["category"] = "Standards";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfm,cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Catch blocks should not be empty.";
	variables.temprulestruct["name"] = "Empty catch block";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = "<cfcatch[\W]+[^\<cf][\W]+</cfcatch|<cfcatch></cfcatch>|<cfcatch>\W+</cfcatch>";
	variables.temprulestruct["severity"] = 3;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);
	
	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = false;
	variables.temprulestruct["category"] = "Standards";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfm,cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Output attribute of components and functions should be set to false.";
	variables.temprulestruct["name"] = "Avoid using output=true in cfcomponent and cffunction";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = ".*output=\042\s*true\s*\042|.*output=\s*true\s*";
	variables.temprulestruct["severity"] = 3;
	variables.temprulestruct["tagname"] = "cfcomponent|cffunction";
	ArrayAppend(variables.rules,variables.temprulestruct);

	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = true;
	variables.temprulestruct["category"] = "Standards";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Every CFC should have an init method.";
	variables.temprulestruct["name"] = "Use init method in CFC";
	variables.temprulestruct["passonmatch"] = true;
	variables.temprulestruct["pattern"] = "function init\(|<cffunction.*name=\042init\042";
	variables.temprulestruct["severity"] = 3;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);

	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = true;
	variables.temprulestruct["category"] = "Standards";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Every CFC should have an onMissingMethod method.";
	variables.temprulestruct["name"] = "Use onMissingMethod method in CFC";
	variables.temprulestruct["passonmatch"] = true;
	variables.temprulestruct["pattern"] = "function onMissingMethod\(|<cffunction.*name=\042onMissingMethod\042";
	variables.temprulestruct["severity"] = 3;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);

	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = false;
	variables.temprulestruct["category"] = "Standards";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfm,cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Hints appear in the auto-generated CFC documentation and aid in documenting your code.";
	variables.temprulestruct["name"] = "Use hint attribute of cfcomponent, cffunction, cfargument";
	variables.temprulestruct["passonmatch"] = true;
	variables.temprulestruct["pattern"] = ".*hint=\042\w+.*\042";
	variables.temprulestruct["severity"] = 1;
	variables.temprulestruct["tagname"] = "cfcomponent|cffunction|cfargument";
	ArrayAppend(variables.rules,variables.temprulestruct);
	
	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = false;
	variables.temprulestruct["category"] = "Standards";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfm,cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Avoid ArrayNew(1). Simply use [].";
	variables.temprulestruct["name"] = "Don't use ArrayNew(1) function";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = "ArrayNew\(1\)";
	variables.temprulestruct["severity"] = 1;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);
	
	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = false;
	variables.temprulestruct["category"] = "Standards";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Use variables-scoped datasource since the datasource should be set on object instantiation.";
	variables.temprulestruct["name"] = "Don't use arguments-scoped datasource";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = "datasource=.*arguments";
	variables.temprulestruct["severity"] = 1;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);
</cfscript>