<cfscript>
	/* PERFORMANCE RULES */
	
	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = true;
	variables.temprulestruct["category"] = "Performance";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfm,cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Avoid nesting cflock as it can lead to long-running code and can cause deadlocks.";
	variables.temprulestruct["name"] = "Don't nest cflock tags";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = "<cflock[\w\W]+<cflock[\w\W]+</cflock";
	variables.temprulestruct["severity"] = 3;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);

	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = false;
	variables.temprulestruct["category"] = "Performance";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfm,cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Prefer StructKeyExists() over ParameterExists()";
	variables.temprulestruct["name"] = "Don't use ParameterExists";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = "parameterExists\(";
	variables.temprulestruct["severity"] = 3;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);

	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = false;
	variables.temprulestruct["category"] = "Performance";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfm,cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Prefer StructKeyExists() over IsDefined()";
	variables.temprulestruct["name"] = "Don't use IsDefined";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = "isDefined\(";
	variables.temprulestruct["severity"] = 3;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);

	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = false;
	variables.temprulestruct["category"] = "Performance";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfm,cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Avoid Evaluate().";
	variables.temprulestruct["name"] = "Don't use Evaluate method";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = "Evaluate(?=\()";
	variables.temprulestruct["severity"] = 5;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);

	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = false;
	variables.temprulestruct["category"] = "Performance";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfm,cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Avoid DE().";
	variables.temprulestruct["name"] = "Don't use DE method";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = "DE(?=\()";
	variables.temprulestruct["severity"] = 5;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);

	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = false;
	variables.temprulestruct["category"] = "Performance";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfm,cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Always use cfif/cfelse instead of iif(). It is significantly faster and more readable.";
	variables.temprulestruct["name"] = "Don't use iif method";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = "iif(?=\()";
	variables.temprulestruct["severity"] = 5;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);

	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = false;
	variables.temprulestruct["category"] = "Performance";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfm,cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Always use struct.key or struct[key] instead of structFind(struct, key). They are significantly faster and more readable.";
	variables.temprulestruct["name"] = "Don't use StructFind method";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = "StructFind(?=\()";
	variables.temprulestruct["severity"] = 5;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);
	
	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = false;
	variables.temprulestruct["category"] = "Performance";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfm,cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Always use x = x - 1 or x-- instead of x = decrementValue(x). It is more readable and slightly faster.";
	variables.temprulestruct["name"] = "Don't use DecrementValue method";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = "DecrementValue(?=\()";
	variables.temprulestruct["severity"] = 5;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);

	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = false;
	variables.temprulestruct["category"] = "Performance";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfm,cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Always use x = x + 1 or x++ instead of x = incrementValue(x). It is more readable and slightly faster.";
	variables.temprulestruct["name"] = "Don't use IncrementValue method";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = "IncrementValue(?=\()";
	variables.temprulestruct["severity"] = 5;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);

	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = false;
	variables.temprulestruct["category"] = "Performance";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfm,cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Always use len() instead of is "", eq "", is not "", neq """;
	variables.temprulestruct["name"] = "Use Len method";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = "is\s+\042\042|eq\s+\042\042|is\s+not\s+\042\042|neq\s+\042\042|is\s+\047\047|eq\s+\047\047|is\s+not\s+\047\047|neq\s+\047\047";
	variables.temprulestruct["severity"] = 3;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);
	
	variables.temprulestruct = {};
	variables.temprulestruct["bulkcheck"] = false;
	variables.temprulestruct["category"] = "Performance";
	variables.temprulestruct["componentname"] = "CodeChecker";
	variables.temprulestruct["customcode"] = "";
	variables.temprulestruct["extensions"] = "cfm,cfc";
	variables.temprulestruct["functionname"] = "checkCode";
	variables.temprulestruct["message"] = "Prefer set tag/script over SetVariable()";
	variables.temprulestruct["name"] = "Don't use SetVariable";
	variables.temprulestruct["passonmatch"] = false;
	variables.temprulestruct["pattern"] = "setVariable\(";
	variables.temprulestruct["severity"] = 3;
	variables.temprulestruct["tagname"] = "";
	ArrayAppend(variables.rules,variables.temprulestruct);
</cfscript>